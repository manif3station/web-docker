#!/usr/bin/perl

use strict;
use warnings;
use Cwd 'cwd';
use File::Find;
use YAML::XS ();
use Env qw( BUILDKIT_PROGRESS DOCKER_BUILDKIT );

$BUILDKIT_PROGRESS = 'plain';

use FindBin '$Bin';

chdir "$Bin/..";

my $order = 1;

mkdir '.enabled' if !-d '.enabled';

my %enabled;

find sub { $enabled{$_} = $order++ } => '.enabled';

$enabled{'base.yml'} = 0;

my %features;

find sub {
    my $name = $_;
    my $path = $File::Find::name;
    find sub {
        my $name = $_;
        my $path = $File::Find::name;
        $features{$name} = $path if -f $path && $name =~ m/\.(yml|yaml)$/;
    } => $path if -d $path && $name eq 'docker-compose';
} => cwd;

if ( grep { /--enable/ } @ARGV ) {
    my ( undef, $service ) = @ARGV;
    $service .= '.yml' if $service !~ m/yml$/;
    die "Unknown services '$service'\n"
      if !$features{$service};
    exec touch => ".enabled/$service";
}

if ( grep { /--disable/ } @ARGV ) {
    my ( undef, $service ) = @ARGV;
    $service .= '.yml' if $service !~ m/yml$/;
    unlink ".enabled/$service";
    exit;
}

if ( grep { /--list/ } @ARGV ) {
    printf "%s\n", join "\n",
      sort map { ( exists $enabled{$_} ? '[+]' : '[-]' ) . " $_" }
      keys %features;
    exit;
}

my $build_from_scratch = 0;

if ( grep { /--build-from-scratch/ } @ARGV ) {
    @ARGV = grep { !/--build-from-scratch/ } @ARGV;
    $build_from_scratch = 1;
}

my @enabled = map { -f => $features{$_} }
  sort { $enabled{$a} <=> $enabled{$b} }
  grep { exists $enabled{$_} } keys %features;

if (join(' ', @ARGV) !~ m/(?:-p|--project-name) \S+/) {
    push @enabled, '--project-name' => (cwd =~ m{.*\/(.*)});
}

my @cmd = ( 'docker-compose', @enabled );

if ( grep { /build/ } @ARGV ) {
    my $config = qx{@cmd config};

    $config = eval { YAML::XS::Load($config) } // {};

    _build_from_snapshot($config->{services}{web}{image});
}

push @cmd, @ARGV;

printf ">>> %s\n", join ' ', @cmd if $ENV{VERBOSE};

exec @cmd;

sub _build_from_snapshot {
    my ($name) = @_ or return;

    my $found = qx{docker images | grep $name};

    my $feature = "$name-image.yml";

    if (!$found || $build_from_scratch) {
        unlink ".enabled/$feature";
        open my $fh, '>', ".enabled/perl-base.yml";
        push @cmd, -f => "src/plugins/perl-base/docker-compose/perl-base.yml";
        return;
    }

    mkdir 'Dockerfiles';

    if (!-f 'Dockerfiles/Dockerfile') {
        open my $read, '<', 'src/plugins/perl-base/Dockerfiles/Dockerfile';
        open my $write, '>', 'Dockerfiles/Dockerfile';
        while (my $line = <$read>) {
            if ($line =~ m/^FROM perl/) {
                print $write "FROM $name:latest\n";
            }
            else {
                print $write $line;
            }
        }
    }

    mkdir 'docker-compose';

    my $my_docker_compose = "docker-compose/$feature";

    if ( !-f $my_docker_compose ) {
        open my $fh, '>', $my_docker_compose;
        print $fh YAML::XS::Dump(
            {
                version  => '3.7',
                services => {
                    web => {
                        build => {
                            context => '..',
                            dockerfile => 'Dockerfiles/Dockerfile'
                        },
                    },
                },
            }
        );
    }

    unlink ".enabled/perl-base.yml";
    open my $fh, '>', ".enabled/$feature";;
    push @cmd, -f => $my_docker_compose;
}
